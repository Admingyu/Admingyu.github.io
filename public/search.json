[{"title":"Hello World","url":"https://www.gemingyu.top/2023/06/20/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","categories":[],"tags":[]},{"title":"美能达X300快门故障维修","url":"https://www.gemingyu.top/2023/06/19/美能达X300快门故障维修/","content":"前几天用x300拍了几张照片， 发现很多曝光不均匀的问题，怀疑是宽门帘有问题搜了一下，好像确实是，需要调整快门：见：https://www.bilibili.com/video/BV184411L74A/\n找到了维修手册：\n\n","categories":[],"tags":[]},{"title":"interview","url":"https://www.gemingyu.top/2021/02/19/interview/","content":"几个面试题Linux\n僵尸进程，孤儿进程\n僵尸进程指的是一个进程使用fork创建子进程，如果子进程退出，父进程又灭有调用wait/waitpid获取子进程状态，此时子进程的状态信息仍在系统中，这种进程为僵尸进程\n孤儿进程指的是父进程已经退出，但其子进程还在运行，那么他的子进程都会变成孤儿进程，被pid为1的init进程收养管理\n危害：\n​    孤儿进程：没有危害，因为有init进程管理\n​    僵尸进程：按理说父进程产生了僵尸进程不管了，然后子进程自己做完自己的事情就结束也可以，但是问题就在于子进程什么时候结束是个未知数，大量这样的僵尸进程会占用进程号（进程号是有限的）。\n​    解决僵尸进程：kill产生僵尸进程的父进程，这样僵尸进程就由init进程接管变成孤儿进程\n\n线程与进程\n​    进程是操作系统分配系统资源的单位，线程是操作系统运算调度的最小单位。\n​    信号量是由内核来维护的，他独立出进程。因此可以通过它来进行同步。\n互斥锁、条件变量、信号量三者的差别：\n​    互斥锁由生成互斥锁的进程解除（因为此时其他线程根本得不到此锁），信号量没有这种限制：一个线程等待某个信号量，而另一个线程可以挂出该信号量\n\n基本概念\n互斥锁（Mutex，Mutual Exclusive Lock）：\n​    获得锁的线程可以完成“读-修改-写”的操作，然后释放锁给其它线程，没有获得锁的线程只能等待而不能访问共享数据，这样“读-修改-写”三步操作组成一个原子操作\nsemaphore（信号量）：\n​    Mutex变量是非0即1的，可看作一种资源的可用数量，初始化时Mutex是1，表示有一个可用资源，加锁时获得该资源，将Mutex减到0，信号量和Mutex类似，表示可用资源的数量，和Mutex不同的是这个数量可以大于1。\n\n\n\n进程之间通信\n常用的通信方式（ linux 下）有\n\n共享内存\n共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存可以直接读写内存是最快的 IPC 方式\n\n匿名和具名管道\n管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。\n\nsocket\n面相网络的一种进程间通信方式，只要有网络存在，它可以跨越任何限制\n\n消息队列\n消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。\n\n\n\nDeamon进程\n在DOS环境中，此类应用程序被称为驻留程序（TSR）。在Windows系统中，由称为Windows服务的应用程序来履行守护进程的职责。\n独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。它不需要用户输入就能运行而且提供某种服务，不是对整个系统就是对某个用户程序提供服务\n守护进程的父进程是init进程，因为它真正的父进程在fork出子进程后就先于子进程exit退出了，所以它是一个由init继承的孤儿进程。守护进程是非交互式程序，没有控制终端，所以任何输出，无论是向标准输出设备stdout还是标准出错设备stderr的输出都需要特殊处理。\n\n\nHTTP\n分布式session:方案原理：将一台机器上的Session数据广播复制到集群中其余机器上使用场景：机器较少，网络流量较小优点：实现简单、配置较少、当网络中有机器Down掉时不影响用户访问缺点：广播式复制到其余机器有一定廷时，带来一定网络开销\n\nCookies和Session\n客户端接收到从服务器端发来的 Session ID 后， 会将其作为Cookie 保存在本地。 下次向服务器发送请求时， 浏览器会自动发送Cookie， 所以 Session ID 也随之发送到服务器。 服务器端可通过验证接收到的 Session ID 识别用户和其认证状态。\n\n\n","categories":[],"tags":[]},{"title":"便宜的个人服务器方案","url":"https://www.gemingyu.top/2021/02/09/cheap-server-solution-in-china/","content":"可能是国内实现最低成本的服务器方案我们来总结一下，必备条件：公网ip：\n据说家里宽带（电信的）可以安装监控的理由向电信申请公网ip，但是有的城市根本就没有空余的公网ip也申请不到，又由于有了公网ip后面还涉及到备案问题，所以此条先弃用。\n\n\n阿里云里面找最便宜的共享型ECS，一个月38，有公网ip\n\n\n这个写的是17，但是加上硬盘和是得38，1M小水管，但是没有关系啊，后面会讲\n物理机：上面也说了，这是ECS里面最便宜的，从cpu到内存到贷带宽都少得可怜，随随便便就瓶颈了，一个个来解决：\nCPU、内存：\n对于我来说家里有闲置的笔记本，4核心8线程8G内存，这配置放到阿里云机房不得500+一个月？ 有什么方法能替代ECS的小机劳动就好了，我这里使用的FRP方案，ECS上面安装FRP服务端，笔记本电脑上安装frp客户端，把用户的所有请求通过反向代理转发到笔记本上，性能完全能满足了，而且笔记本满载不到100w，美滋滋.\n带宽：\n这个就很伤了，阿里云只给了1m,实在是太小了，但是！ \n\n\n可以按照使用流量付费的，不一定固定带宽（这个被阿里云藏的比较很深\n这样算下来服务器一个月也就17块钱\n我看了看流量付费的费用是0.8元/G，还可以设置带宽上限（我设置的是16M），超流量警告什么买的，安全性，费用都还行，接口什么的一个也就几KB吧，至于图片视频什么的，丢到oss里面就行 了\n域名：我申请了26块一年的域名，免费备案（前面ECS需要购买3个月以上才能给备案）自己申请了免费ssl证书\n这样算下来，一年差不多200吧，这个配置，很不错了吧\n","categories":[],"tags":["服务器"]},{"title":"FlaskBUG和技巧（小白","url":"https://www.gemingyu.top/2021/02/09/FlaskSkill1/","content":"问题和BUGFlask-SQLAlchemy选择日期等于今天的数据https://segmentfault.com/q/1010000014045246\nsqlalchemy几种查询方式总结http://www.cnblogs.com/shenckicc/p/6797990.html\nPython SQLAlchemy 不确定条件查询https://www.jianshu.com/p/a33f48387efa\nsqlachemy中批量删除的问题session.query(User).filter(User.id.in_((1, 2, 3))).delete(synchronize_session=False)session.commit() # or session.expire_all()\nhttps://segmentfault.com/q/1010000000130368\nSQLAlchemy ORM 批量插入数据几种方法由于工作需要，需要批量插入大量数据，了解到以下几种批量插入方法\n第一种方法：\ns = Session()objects = [    User(name=&quot;u1&quot;),    User(name=&quot;u2&quot;),    User(name=&quot;u3&quot;)]s.bulk_save_objects(objects)\n第二种方法：\nobjects = [User(name=&quot;u1&quot;), User(name=&quot;u2&quot;), User(name=&quot;u3&quot;)]session.add_all(objects)session.commit()\n\npy-sqlalchemy更新数据未报错但数据不更新：1.filter过滤id时不能用id==xxxArticle.query.filter(id == item_id)而是Article.query.filter(Article.id == item_id)\n2.update()之后要commit():\nfor i in params.get(&#x27;item_id&#x27;).split(&#x27;,&#x27;):Article.query.filter(Article.id == i).update(&#123;Article.active_flag: active_flag&#125;)db.session.commit()\n\n只查看数据是否存在，不取出数据（提高性能）：existance = db.session.query(exists().where(CollegeCategory.id == params.get(&#x27;category_id&#x27;))).scalar()    if not existance:  # True or False:        return auth_handler(SYS_STATUS.FAILURE, None, &#x27;文章分类不存在&#x27;)\n第二种方法：\nif session.query(Item.id).filter(Item.email==newItem.email,                                 Item.type==newItem.type).count() &gt; 0:    // item exists\n第三种方法：\ndb.session.query(exists().where(User.phone_prefix == phone[0],User.phone== phone[1])).scalar()\n\nFLask 分词搜索：keyword_list = list(jieba.cut_for_search(params.get(&#x27;input&#x27;)))    keyword_filter = [CollegeCategory.name.like(&#x27;%&#123;&#125;%&#x27;.format(kw)) for kw in keyword_list]    categorie_list = CollegeCategory.query.filter(*keyword_filter).with_entities(        *college_category_basic).order_by(order_mode).paginate(page=page_index,                                                               per_page=page_size,                                                               error_out=False)\n\n自定义sqlalchemy查询出来的字段名\n比如说，user.name原本返回‘name’现在改成‘姓名’：user.name.label(&quot;姓名&quot;)\nselect username, userid, &#39;user&#39; as new_column  from  users_table\nusers_table.c.userid.label(&#39;NewColumn&#39;)\nhttps://stackoverflow.com/questions/3576382/select-as-in-sqlalchemy\n","categories":[],"tags":["Flask"]},{"title":"windows10 开机无法识别的网络，必须重启网卡或者诊断才能获取ip","url":"https://www.gemingyu.top/2021/02/09/windowsUnrecognizedNetwork/","content":"点击开始菜单，在搜索栏中输入：“services.msc”（或者开始菜单搜索“服务”），并按下回车。如果此时弹出用户账户控制窗口，点击“继续”\n找到一下几个服务：\nDHCP Client\nDNS Client\nNetwork Connection\nNetwork Setup Service\nTCP/IP NetBIOS Helper\n逐个双击打开以上服务，把启动类型更改为自动，然后点击“服务状态”下面的“启用”按钮，然后确定保存\n重启电脑，问题解决\n","categories":[],"tags":["Windows，疑难杂症"]},{"title":"神力科莎Linux 开服务器","url":"https://www.gemingyu.top/2021/02/09/assettoLinuxServer/","content":"此方法来源于Steam一个大佬– 推荐系统：Ubuntu– 需要公网ip的服务器\n如果你的服务器是64位的系统需要安装32位的运行库（Steam 是32位的：32位系统可跳过\nsudo apt-get updatesudo apt-get install lib32gcc1 \n安装strackersudo apt-get install zlib1g:i386\n\n创建Steam用户,并获取该用户下的目录权限：sudo mkdir  /home/steam                  chown user: group /home/steam -R\n\n解压Steam Linux终端，并解压执行sudo chmod -R 755  /home/steam/cd /home/steamwget http://media.steampowered.com/client/steamcmd_linux.tar.gztar -xvf steamcmd_linux.tar.gz rm steamcmd_linux.tar.gz  ./steamcmd.sh +@sSteamCmdForcePlatformType windows\n\n之后会进入Steam终端&gt;,像这样：Steam&gt;\n\n输入Login  你的用户名并回车Steam&gt; login &lt;username&gt;;Steam&gt; passwdSteam&gt; enter security code sent to you registration email of your steam account \n\n然后再输入密码登录, 后面可能还让你输入邮件验证码、动态令牌之类的，根据提示来就行\n然后安装app：Steam&gt; force_install_dir ./assettoSteam&gt; app_update 302550  Steam&gt; exit\n\n然后配置一下你的开服信息，比如赛道，车，服务器名称什么的配置文件在*/home/steam/assetto/cfg/server_cfg.ini*用vim或者nano编辑都可以的\n配置车辆列表：/home/steam/assetto/cfg/entry_list.ini\n配置完成后开服：./acServer\n\n到此结束，此外你还要把端口9600的udp，tcp的端口打开，包括http的8081端口也要打开：\n比如可以这样打开：\nsudo ufw allow 9600sudo ufw allow 8081\n\n注意，阿里云的服务器，要到阿里云ECS的安全组里面配置打开\n","categories":[],"tags":["神力科莎"]},{"title":"神力科莎局域网联机，也可用zero-tier","url":"https://www.gemingyu.top/2021/02/05/AssettoCorsaLan/","content":"神力科莎局域网联机教程打开神力科莎安装目录，目录下有个server文件夹, 打开目录下的acServerManager.exe，随便配置一下，点击START SERVER,之后会打开个终端窗口，过了一会就会闪退，没关系\n下一步\n进入presets/SERVER_00文件夹(也可能是SERVER_01等等)，打开server_cfg.ini，找到REGISTER_TO_LOBBY=1这一行，改为REGISTER_TO_LOBBY=0，然后保存，关闭文件\n重新打开acServerManager.exe, START SERVER,OK\n让你局域网另一台计算机（客户端）打开神力科莎，选择上限，进入`联机阶段``, 等待刷新\n** 要确保两台计算机在同一网段，搜不到开服的计算机的话，设置服务器列表上面的过滤条件，有可能是被过滤掉了 **\n","categories":[],"tags":[]}]