[{"title":"version GLIBC_PRIVATE not defined in file libc.so.6 with link time reference","url":"https://www.gemingyu.top/2024/08/14/lib64-libpthread-so-0-symbol-libc-dl-error-tsd-version-GLIBC-PRIVATE-not-defined-in-file-libc-so-6-with-link-time-reference/","content":"GLIBC_PRIVATE not defined in file libc.so.6 with link time reference自己在centos上想升级glib，下载源码make install之后，不能用，又yum install gettext，之后系统大部分命令都不能执行了，全部报这个错误：\nlib64/libpthread.so.0: symbol __libc_dl_error_tsd, version GLIBC_PRIVATE not defined in file libc.so.6 with link time reference\n比如grep：grep: relocation error: /lib64/libpthread.so.0: symbol __libc_dl_error_tsd, version GLIBC_PRIVATE not defined in file libc.so.6 with link time referencemkdir: relocation error: /lib64/libpthread.so.0: symbol __libc_dl_error_tsd, version GLIBC_PRIVATE not defined in file libc.so.6 with link time reference/usr/bin/python3: relocation error: /lib64/libpthread.so.0: symbol __libc_dl_error_tsd, version GLIBC_PRIVATE not defined in file libc.so.6 with link time reference\nls,ps,grep这些基本命令都不能用了貌似只有内核自带的命令能用，看起来是系统坏了\n此时千万不要断开ssh连接（断开就连不上了，需要接触到服务器，才能进行后续补救的措施）更不要重启，重启就开不开机了\n先用head查看lib64里面现有版本有哪些:head /usr/lib64/ld*.sohead /usr/lib64/libc-*\n返回\n==&gt; /usr/lib64/ld-2.17.so &lt;==ELF\u0002\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000&gt;\u0000\u0001\u0000\u0000\u0000@\u0011\u0000\u0000\u0000\u0000==&gt; /usr/lib64/ld-2.25.so &lt;==ELF\u0002\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000&gt;\u0000\u0001\u0000\u0000\u0000�\u0011\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000�1==&gt; /usr/lib64/libc-2.17.so &lt;==ELF\u0002\u0001\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000&gt;\u0000\u0001\u0000\u0000\u0000`&amp;\u0002\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000p� \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u00008\u0000==&gt; /usr/lib64/libc-2.25.so &lt;==ELF\u0002\u0001\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000&gt;\u0000\u0001\u0000\u0000\u0000  \u0002\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Û\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u00008\u0000\n说明存在2.25和2.17两个版本，由于我是相当于升级了ld版本，所以原来的是2.17\n重新链接回到2.17版本，并测试ps能不能用：sln /usr/lib64/ld-2.17.so /usr/lib64/ld-linux-x86-64.so.2sln /usr/lib64/libc-2.17.so /usr/lib64/libc.so.6ps# 返回：   PID TTY          TIME CMD     1 ?        14:01:50 systemd     2 ?        00:05:22 kthreadd     4 ?        00:00:00 kworker/0:0H     6 ?        01:53:51 ksoftirqd/0     7 ?        00:02:25 migration/0     8 ?        00:00:00 rcu_bh\n到这里说明解决方案得到了验证,后续的测试发现python，sshd，supervisor还不能用，有报错：\n/usr/bin/python3: relocation error: /lib64/libdl.so.2: symbol _dl_catch_error, version GLIBC_PRIVATE not defined in file libc.so.6 with link time referencevirtualenvwrapper.sh: There was a problem running the initialization hooks.\n检查目录，看下在新增/usr/lib64/ld-2.25.so那个时间点，哪些文件链接被改变了，就改回去$ ls -lh /lib64/| grep &#x27;14 10:58&#x27;drwxr-xr-x.  2 root root  4.0K Aug 14 10:58 gettextlrwxrwxrwx.  1 root root    20 Aug 14 10:58 libasprintf.so.0 -&gt; libasprintf.so.0.0.0lrwxrwxrwx.  1 root root    21 Aug 14 10:58 libcroco-0.6.so.3 -&gt; libcroco-0.6.so.3.0.1lrwxrwxrwx.  1 root root    21 Aug 14 10:58 libgettextpo.so.0 -&gt; libgettextpo.so.0.5.4lrwxrwxrwx.  1 root root    12 Aug 14 10:58 libm.so.6 -&gt; libm-2.25.so\n\n经过比对后来又改回了这三个链接到2.17\nsln /lib64/libdl-2.17.so /lib64/libdl.so.2sln /lib64/libBrokenLocale-2.17.so /lib64/libBrokenLocale.so.1sln /lib64/libm-2.17.so /lib64/libm.so.6\n总结一共改回了这些，具体要根据自己的情况改sln /usr/lib64/ld-2.17.so /usr/lib64/ld-linux-x86-64.so.2sln /usr/lib64/libc-2.17.so /usr/lib64/libc.so.6sln /lib64/libdl-2.17.so /lib64/libdl.so.2sln /lib64/libBrokenLocale-2.17.so /lib64/libBrokenLocale.so.1sln /lib64/libm-2.17.so /lib64/libm.so.6","categories":[],"tags":[]},{"title":"联想Y720 Cube / H170 ITX主板刷BIOS支持E3v5 CPU","url":"https://www.gemingyu.top/2024/06/08/联想Y720-Cube-H170-ITX主板刷BIOS支持E3v5-CPU/","content":"组itx找到了这个主板：\n查了下原来是联想的一款游戏主机的主板型号是Y720 Cube，主板是H170芯片组，故入，上了G3930CPU，用了一年，最近想学虚拟化和k8s，两核的G3930不能玩，想着升级一下cpu，查了下资料：\nIntel CPU接口：LGA1151，支持7代CPU,Y720 cube原配的cpu是i7 -7700\nCPU型号i7-7700CPU第七代智能英特尔® 酷睿™ i7操作系统操作系统Windows 10 家庭版内存内存类型DDR4内存容量16GB硬盘硬盘类型机械硬盘+固态硬盘硬盘容量1TB+128G SSD显卡显卡类型独立显卡显存容量8GB显存类型GDDR5光驱光驱类型无光驱前(侧)面接口前面板USB接口2*USB3.0后面接口视频接口VGA x 1/ HDMI x 1其他接口4xUSB2.0；2xUSB3.0网络通信蓝牙有无线网卡killer 802.11ac无线网卡\n但是7700太贵了，要500多，想着都是1151针，看能不能上E3毕竟E3便宜\n\n考虑到功耗，集显需求，综合下来选择了E3-1225V5,76包邮\n魔改BIOS，使主板支持E3：提取BIOS\n官网下载Y720 Cube Biso升级程序\n\n使用7zip解压，提取最新版本的BIOS文件IMAGEO36.bin\n\n\n如果找不到官网BIOS，只能用编程器读取主板上bios程序\n\n\n修改BIOS\n使用CoffieTime 打开bios文件，如图，修改ME到最新版本，Replace，并将状态改为Disabled\n\n把下面的Fix和Patch全解锁\n\n查了下微码，目标CPU微码已经在BIOS里面了，所以只需要解锁就行，就没有改这块，不清楚为什么有两个506E3，一个是C2，另一个是A6希望知道的大佬讲解下\n\nvBios和GOP也升级到最新版本\n\n转到Extra选项卡，这三个全解锁成绿色\n\n点击Save image将修改后的bios保存\n\n\n备份旧的BIOS，刷入新的BIOS编程器硬件方面，我使用CH341A编程器，软件方面我是用NeoProgrammer，也可以使用CH341A programmer\n\n拆下主板上的bios芯片夹在编程器上，插到另一台电脑USB接口\n\n备份片上bios，如果检测芯片型号不成功，可以试一下手动查bios芯片上的丝印，然后通过Search按钮选择注意，这这样的话要确保能读出来bios数据，且数据不能是空白(FF/00)\n\n写入新的bios\n\n打开修改后的bios\n\n清空芯片\n\n写入bios\n\n校验写入数据\n\n\n\n完成之后将bios芯片焊回主板，安回CPU，Ram 开机测试开机滴滴声报错问题这样刷完之后，开机会有两声滴滴报错，在bios logo页面显示无法读取序列号错误，虽然不影响正常开机但是还是想做的完美点，可以进系统后通过程序写入，程序就是官网下载的bios升级程序解压出来的那个ANMIDEWIN.exe,根据这个指引，写入相关信息 how-to-update-the-machine-type-and-model-mtm-system-serial-number\n# To flash machine type and model: ANMIDEWIN.exe /sp &quot;String&quot;# To flash serial number: ANMIDEWIN.exe /ss &quot;String&quot;# To flash system brand ID: ANMIDEWIN.exe /sv &quot;String&quot;\n\nString替换为相应的值\n\n这样开机就没有报错了。\n","categories":[],"tags":[]},{"title":"修复ColorOS14删除系统软件后无法启动","url":"https://www.gemingyu.top/2024/05/07/修复ColorOS14删除系统软件后无法启动/","content":"起源一加12在尝试安装flowpilot时总是误报有恶意程序尝试破坏手机系统，已阻止，导致我无法安装成功，于是开始研究怎么删除这个检测刚开始删除了com.coloros.securityguard,没有起作用\nadb shell pm uninstall -k --user 0 com.coloros.securityguard\n\n后来删除了com.oplus.exsystemservice，有作用了\n问题出现但是用着用着发现不对劲，没法截屏了，遂重启，重启之后无法进入桌面，甚至按音量键都不会显示音量条，电话也接不了\nadb shell pm disable com.oplus.exsystemserviceadb shell pm suspend com.oplus.exsystemserviceadb shell pm uninstall --user 0 com.oplus.exsystemservice\n在酷安和社区发帖求助，都是说资料不保，要9008，还有人说他也经历过，要去售后，售后恢复后数据都没了因为手机里面还存了很多照片视频，就想着能开机肯定有解决方案\n尝试解决\n没有启用OPPO工作台功能，无法通过工作台导出手机文件\n\n没有打开连接至windows功能，无法通过连接windows导出手机内文件\n\n连接家里电脑无法点击USB功能，无法选择至文件传输，读取不了文件，adb功能无法使用，未授权\n\n开发者选项里虽然开启了usb调试，但是默认usb功能处于仅充电功能，无法操作\n\nwifi调试未开启重启后自动关闭了，无法通过wifi调试操作\n\n第二天回到公司连接到之前连接执行adb命令的那台Ubuntu电脑上，然后尝试adb shell，惊喜的发现adb处于启用的状态，赶紧把之前的系统包恢复回来\nadb shell pm install-existing --user 0 com.oplus.exsystemserviceadb shell pm unsuspend com.oplus.exsystemserviceadb shell pm enable com.oplus.exsystemservice\n真的是信了这个可卸载系统组件列表的邪，https://gist.github.com/zxdawn/21771f89f0e6ee01bcb0bb740058e2a0\n\n\n后续分析\n导出apk：\nadb shell pm path com.oplus.exsystemservice# /system_ext/priv-app/OplusExSystemService/OplusExSystemService.apkadb pull /system_ext/priv-app/OplusExSystemService/OplusExSystemService.apk\n\n反编译https://www.decompiler.com/jar/0b9fc5dd87ba41bb9369e996933a5210/OplusExSystemService.apk\n看起来是和系统输入，手势，唤醒锁，相关的东西，难怪\n\n\n","categories":[],"tags":[]},{"title":"ubuntu桌面系统终端应用打不开，闪退","url":"https://www.gemingyu.top/2024/04/18/ubuntu桌面系统终端应用打不开，闪退/","content":"如题，在修改一番系统文件后，导致终端打不开，闪退，经过排查原来是语言配置有问题\nCtrl+Alt+F1进入终端执行语言配置：\nlocale-genlocalectl set-locale LANG=&quot;en_US.UTF-8&quot;\n这两行命令是生成语言配置文件，并将系统语言设置问英文\nsource:https://bbs.archlinux.org/viewtopic.php?pid=1405049#p1405049\n","categories":[],"tags":[]},{"title":"Golang实现不用SSL使用HTTP2服务-golang http2 without tls(h2c)","url":"https://www.gemingyu.top/2024/02/07/Golang实现不用SSL使用HTTP2服务/","content":"使用h2c包实现，h2c包即：http2 without tls，不用tls的http2协议，有关支持这个的声音早在2016年就已经提出来(issue)[https://github.com/golang/go/issues/14141]现在已经有官方包h2c(golang.org/x/net/http2/h2c)[golang.org/x/net/http2/h2c]\n服务端原本是HTTP协议，修改之后代码如下（注释部分是原来的代码）\nimport &quot;golang.org/x/net/http2/h2c&quot;    func StartServer(listenAddress *string) &#123;\trouter := server.InitRouter()\t// serverHttp := &amp;http.Server&#123;\t// \tAddr:    *listenAddress,\t// \tHandler: router,\t// &#125;\t// if err := serverHttp.ListenAndServe(); err != nil &amp;&amp; err != http.ErrServerClosed &#123;\t// \tlog.Fatalf(&quot;listen err: %s\\n&quot;, err)\t// &#125;\tserverHttp := &amp;http.Server&#123;\t\tAddr:    *listenAddress,\t\tHandler: h2c.NewHandler(router, &amp;http2.Server&#123;&#125;),\t&#125;\tif err := serverHttp.ListenAndServe(); err != nil &amp;&amp; err != http.ErrServerClosed &#123;\t\tblog.Errorf(&quot;listen err: %s\\n&quot;, err)\t&#125;&#125;\n客户端修改如下,注释部分是旧代码，新的Tansport为transport2变量：\nfunc (m NewTaskHandler) SendTaskHttp(msg MsgTask) (err error) &#123;\tif msg.Port &lt; 1 &#123;\t\tmsg.Port = 6180\t&#125;\turl := fmt.Sprintf(&quot;http://%v:%v/api/v1/task&quot;, msg.IP, msg.Port)\tretryClient := retryablehttp.NewClient()\tretryClient.RetryMax = 5\tretryClient.RetryWaitMin = time.Duration(5 * time.Second)\tretryClient.RequestLogHook = func(logger retryablehttp.Logger, req *http.Request, retry int) &#123;\t\treq.AddCookie(&amp;http.Cookie&#123;\t\t\tName:  &quot;Token&quot;,\t\t\tValue: &quot;TWFzdGVyLVNlY3JldCBsb2cgZmlsZW5hbWU=&quot;,\t\t&#125;)\t&#125;\t// transport := &amp;http.Transport&#123;\t// \tTLSClientConfig:     &amp;tls.Config&#123;InsecureSkipVerify: true&#125;, // 不校验服务端证书\t// \tMaxIdleConns:        10,\t// \tMaxIdleConnsPerHost: 10,\t// \tIdleConnTimeout:     30 * time.Second, // 连接空闲超时\t// &#125;\ttransport2 := &amp;http2.Transport&#123;\t\tTLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: true&#125;, // 不校验服务端证书,\t\tAllowHTTP:       true,\t\tDialTLS: func(network, addr string, cfg *tls.Config) (net.Conn, error) &#123;\t\t\treturn net.Dial(network, addr)\t\t&#125;,\t&#125;\tretryClient.HTTPClient.Transport = transport2\tretryClient.HTTPClient.Timeout = 60 * time.Second\tbody, err := json.Marshal(msg)\tif err != nil &#123;\t\tblog.Error(&quot;err body %v %v&quot;, msg, err)\t\treturn err\t&#125;\tresp, err := retryClient.Post(url, &quot;application/json&quot;, body)\tif err != nil &#123;\t\tblog.Error(&quot;err url %v %v&quot;, url, err)\t\treturn err\t&#125;\n以上，我使用了retryablehttp用于失败重试，可替换为默认的httpclient，可忽略这一点不同，另外我在transport2中配置:\n\nAllowHTTP:true,实现允许HTTP协议，\nDialTLS不使用默认的TLS连接，使用我们自定义的直接连接.\nTLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: true&#125; 不校验服务端证书\n\n使用wireshark抓包试试：\n我尝试在client机器上运行tcpdump抓包，过滤协议为tcp， 网卡接口为bond0,端口6108，使用-w参数将包文件保存到package.pcap\ntcpdump tcp -i bond0 port 6180 -w package.pcap\n然后使用wireshark打开数据包奇怪的是wireshark并没有显示协议类型，我查了一番应该是默认不支持显示http2协议，也许和我的版本有关\n\n改用Charles打开数据包，可见协议已经为HTTP2\n至此已经实现了客户端和服务端使用HTTP2协议通讯\n","categories":[],"tags":[]},{"title":"记一次golang内存泄露排查和修复","url":"https://www.gemingyu.top/2024/01/01/记一次golang内存泄露排查和修复/","content":"使用pprof工具分析内存情况假设运行host的ip为192.168.2.10在程序入口添加以下代码（注意添加后会影响性能，不建议在线上使用）：\nimport _ &quot;net/http/pprof&quot;go func() &#123;\tlog.Println(http.ListenAndServe(&quot;0.0.0.0:6060&quot;, nil))&#125;()\n\n然后在本地开一个终端，开启采样分析工具的web服务：\ngo tool pprof -seconds=10 -http=:9999 http://192.168.2.10:6060/debug/pprof/heap\n\n\n如果本地无法访问host网络的192.168.2.10地址（比如存在防火墙，或者网络隔离可在host上生成一个采样\ncurl http://localhost:6060/debug/pprof/heap?seconds=60 &gt; heap\n然后传输heap文件到本地，执行：\ngo tool pprof heap\n\n之后将会自动打开一个本地网页点击View-&gt;Top 可见主要是前两处调用占用了不合常规的大量的内存空间，因为这两处函数不该处理这么多的数据\n\n** 切换FlameGraph(new)可见调用层级 **\n\n** 切换Graph可见调用图 **\n\nalloc 和inuse的区别“Allocate”（分配）和”Inuse”（正在使用）是与内存管理相关的两个术语，通常用于描述程序在运行时对内存的使用情况。它们之间的区别在于以下几点：\n\nAllocate（分配）：这通常指的是程序在运行时向操作系统请求分配一定数量的内存空间。这个内存可能还没有被程序实际使用，但已经被分配给了程序。在程序运行期间，可能会多次进行内存分配，但不一定所有分配的内存都会被实际使用。\n\nInuse（正在使用）：这指的是程序实际上正在使用的内存量。这包括已经分配给程序并且程序正在利用的内存。在运行过程中，程序可能会动态地分配和释放内存，因此”Inuse”会在不同的时间点发生变化。\n\n\n在一些内存分析工具中，你可能会看到”Allocate”和”Inuse”两者之间的区别。例如，当程序开始执行时，可能会分配一定量的内存，但直到程序执行某些操作，这些内存才会真正被使用。因此，在某些情况下，”Allocate”可能会大于”Inuse”，因为一部分分配的内存可能尚未被程序利用。\n总体而言，”Allocate”表示分配给程序的内存总量，而”Inuse”表示程序当前实际使用的内存量。\n\n找到泄露点之后就可以分析是哪里泄露了内存，情况分以下几种：参考https://go101.org/article/memory-leaking.html\n泄露点:\nRedis管道未关闭：根据pprof可见redis相关pipeline操作持续占用大量的内存，检查相关代码发现管道在使用没有关闭  添加函数退出后的关闭操作：\n \n\nchannel未关闭：ppro可见NewFastStep相关调用持续占用大量内存，调用链上存在未关闭的chan，channel在写入完毕就应该关闭，此时并不影响读取\nfunc NewFastStepQueue(defaultTopic, defaultQueue, dfsAddr string, db, dbCow mongodb.CommonClient, rds redis.Client) *FastStepQueue &#123;    ctx, cancel := context.WithCancel(context.Background())    return &amp;FastStepQueue&#123;        db:           db,  ...        FastStep:     make(chan TaskStep, 100),        Ctx:          ctx,        cancel:       cancel,    &#125;&#125;func (queue *FastStepQueue) AssignFastSteps(fastSteps []TaskStep) &#123;    for _, task := range fastSteps &#123;        queue.FastStep &lt;- task        blog.V(3).Infof(&quot;快速任务已经添加到队列:%v&quot;, task)    &#125;    go queue.SendFastStepsQueue()&#125;\n\n    添加关闭channel代码：   close(queue.FastStep) \n\n\n优化之后2小时：\n\n优化之后24小时：在NewMQ这里仍有不少优化空间\n\n经过排查发现有两处泄露\n\n未关闭的channel导致添加close chanel的操作\n\n\n\n部分情况下，走到某些逻辑中返回后groutine没有结束（context cancel没有触发导致）\n  删除在各个逻辑中触发的cancel函数，改为使用defer添加相应的处理，确保在函数退出时结束context\n\n\n再次优化之后72小时后\n已经解决了内存泄露\n监控图表中可见更新后，基本上不存在泄露了\n30.png)\n","categories":[],"tags":[]},{"title":"OpenWrt ps命令不全，不能使用ps -ef","url":"https://www.gemingyu.top/2023/08/15/OpenWrt-ps命令/","content":"因为openwrt lede istoreos这些系统ps命令都是来自busybox的，所以功能不全，aux，ef选项都是不支持的，安装cps-ng-ps可解决\nopkg update &amp;&amp; opkg install procps-ng-ps\n\n\n\n","categories":[],"tags":[]},{"title":"快速体验在终端中使用浏览器","url":"https://www.gemingyu.top/2023/07/27/快速体验在终端中的浏览器/","content":"众所周知 终端可以显示各种颜色的字符，字符又可以构成图形，于是有个项目是将html转为svga，做到可以在终端ssh中显示html内容Forking Chrome to turn HTML into SVG - Fathy Boundjadj\n那可不可以把终端当浏览器呢？发现竟然真有人做了这个东西\n** carbonyl是基于Chromium构建的终端浏览器。**\n它支持几乎所有的Web API，包括WebGL、WebGPU、音视频播放、动画等等。它速度很快，甚至比打开chrome还快，在一秒钟内启动，以60帧每秒运行，并且在闲置时CPU使用率为0%。它不需要窗口服务器（即在安全模式控制台中工作），甚至可以通过SSH运行浏览器。\n使用方式\n需要先安装好docker然后\ndocker run -ti fathyb/carbonyl https://www.gemingyu.top\n\n即可打开https://www.gemingyu.top\n\n甚至可以玩网页游戏，看视频\n\n项目地址 https://github.com/fathyb/carbonyl\n","categories":[],"tags":[]},{"title":"美能达X300快门故障维修","url":"https://www.gemingyu.top/2023/06/19/美能达X300快门故障维修/","content":"前几天用x300拍了几张照片， 发现很多曝光不均匀的问题，怀疑是宽门帘有问题搜了一下，好像确实是，需要调整快门：见：https://www.bilibili.com/video/BV184411L74A/\n找到了维修手册：\n\n","categories":[],"tags":[]},{"title":"rs-28游戏机拆解与刷机","url":"https://www.gemingyu.top/2023/06/19/rs-28-gameconsole-tear/","content":"本来是买给朋友们当伴手礼的，仔细研究一下发现这东西竟然有linux系统\n整合版固件以及下载地址： RS77-4GB全中文整合包-20230624\n以下是折腾简记：\n于是买了一台先拆开看看\n开机开机是这样的，没有拍图，截一张其他的卖家秀：\n\n拆机附送了一张4g的tf卡，拔掉卡能开机，但是菜单没有任何内容，能进设置，猜想是内置flash中烧录了基本系统，然后加载tf卡上的资源，拆开后 ，一眼看出这颗cpu是全志的f1c100s，外挂flash芯片，但是看起来有两颗flash芯片？\n\n屏号是WL-281405-A1\n\n刷系统根据芯片手册，它是支持从tf启动的，刷入 miyoo 开源系统到tf卡，开机，白屏没有任何反应。。。\n上编程器！成功读出8M flash上的系统，binwalk了下，不能完美解包[图1] [图2]\n找到了可用固件经过一番研究，司徒开源» 研究FC3000掌機的開源可行性发现应该是屏幕和驱动不兼容，顺腾摸瓜找到了一个群，交流发现可以使用rs-77的固件，里面已经适配好了屏幕驱动，刷入开机,成功进系统，bitterboy！\n开机！支持的模拟器很多很多，甚至可以玩dos和java游戏，就是这块屏幕真的瞎眼，太差了\n\n\n后续待更新\n","categories":[],"tags":[]},{"title":"interview","url":"https://www.gemingyu.top/2021/02/19/interview/","content":"几个面试题Linux\n僵尸进程，孤儿进程\n僵尸进程指的是一个进程使用fork创建子进程，如果子进程退出，父进程又灭有调用wait/waitpid获取子进程状态，此时子进程的状态信息仍在系统中，这种进程为僵尸进程\n孤儿进程指的是父进程已经退出，但其子进程还在运行，那么他的子进程都会变成孤儿进程，被pid为1的init进程收养管理\n危害：\n​    孤儿进程：没有危害，因为有init进程管理\n​    僵尸进程：按理说父进程产生了僵尸进程不管了，然后子进程自己做完自己的事情就结束也可以，但是问题就在于子进程什么时候结束是个未知数，大量这样的僵尸进程会占用进程号（进程号是有限的）。\n​    解决僵尸进程：kill产生僵尸进程的父进程，这样僵尸进程就由init进程接管变成孤儿进程\n\n线程与进程\n​    进程是操作系统分配系统资源的单位，线程是操作系统运算调度的最小单位。\n​    信号量是由内核来维护的，他独立出进程。因此可以通过它来进行同步。\n互斥锁、条件变量、信号量三者的差别：\n​    互斥锁由生成互斥锁的进程解除（因为此时其他线程根本得不到此锁），信号量没有这种限制：一个线程等待某个信号量，而另一个线程可以挂出该信号量\n\n基本概念\n互斥锁（Mutex，Mutual Exclusive Lock）：\n​    获得锁的线程可以完成“读-修改-写”的操作，然后释放锁给其它线程，没有获得锁的线程只能等待而不能访问共享数据，这样“读-修改-写”三步操作组成一个原子操作\nsemaphore（信号量）：\n​    Mutex变量是非0即1的，可看作一种资源的可用数量，初始化时Mutex是1，表示有一个可用资源，加锁时获得该资源，将Mutex减到0，信号量和Mutex类似，表示可用资源的数量，和Mutex不同的是这个数量可以大于1。\n\n\n\n进程之间通信\n常用的通信方式（ linux 下）有\n\n共享内存\n共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存可以直接读写内存是最快的 IPC 方式\n\n匿名和具名管道\n管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。\n\nsocket\n面相网络的一种进程间通信方式，只要有网络存在，它可以跨越任何限制\n\n消息队列\n消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。\n\n\n\nDeamon进程\n在DOS环境中，此类应用程序被称为驻留程序（TSR）。在Windows系统中，由称为Windows服务的应用程序来履行守护进程的职责。\n独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。它不需要用户输入就能运行而且提供某种服务，不是对整个系统就是对某个用户程序提供服务\n守护进程的父进程是init进程，因为它真正的父进程在fork出子进程后就先于子进程exit退出了，所以它是一个由init继承的孤儿进程。守护进程是非交互式程序，没有控制终端，所以任何输出，无论是向标准输出设备stdout还是标准出错设备stderr的输出都需要特殊处理。\n\n\nHTTP\n分布式session:方案原理：将一台机器上的Session数据广播复制到集群中其余机器上使用场景：机器较少，网络流量较小优点：实现简单、配置较少、当网络中有机器Down掉时不影响用户访问缺点：广播式复制到其余机器有一定廷时，带来一定网络开销\n\nCookies和Session\n客户端接收到从服务器端发来的 Session ID 后， 会将其作为Cookie 保存在本地。 下次向服务器发送请求时， 浏览器会自动发送Cookie， 所以 Session ID 也随之发送到服务器。 服务器端可通过验证接收到的 Session ID 识别用户和其认证状态。\n\n\n","categories":[],"tags":[]},{"title":"便宜的个人服务器方案","url":"https://www.gemingyu.top/2021/02/09/cheap-server-solution-in-china/","content":"可能是国内实现最低成本的服务器方案我们来总结一下，必备条件：公网ip：\n据说家里宽带（电信的）可以安装监控的理由向电信申请公网ip，但是有的城市根本就没有空余的公网ip也申请不到，又由于有了公网ip后面还涉及到备案问题，所以此条先弃用。\n\n\n阿里云里面找最便宜的共享型ECS，一个月38，有公网ip\n\n\n这个写的是17，但是加上硬盘和是得38，1M小水管，但是没有关系啊，后面会讲\n物理机：上面也说了，这是ECS里面最便宜的，从cpu到内存到贷带宽都少得可怜，随随便便就瓶颈了，一个个来解决：\nCPU、内存：\n对于我来说家里有闲置的笔记本，4核心8线程8G内存，这配置放到阿里云机房不得500+一个月？ 有什么方法能替代ECS的小机劳动就好了，我这里使用的FRP方案，ECS上面安装FRP服务端，笔记本电脑上安装frp客户端，把用户的所有请求通过反向代理转发到笔记本上，性能完全能满足了，而且笔记本满载不到100w，美滋滋.\n带宽：\n这个就很伤了，阿里云只给了1m,实在是太小了，但是！ \n\n\n可以按照使用流量付费的，不一定固定带宽（这个被阿里云藏的比较很深\n这样算下来服务器一个月也就17块钱\n我看了看流量付费的费用是0.8元/G，还可以设置带宽上限（我设置的是16M），超流量警告什么买的，安全性，费用都还行，接口什么的一个也就几KB吧，至于图片视频什么的，丢到oss里面就行 了\n域名：我申请了26块一年的域名，免费备案（前面ECS需要购买3个月以上才能给备案）自己申请了免费ssl证书\n这样算下来，一年差不多200吧，这个配置，很不错了吧\n","categories":[],"tags":["服务器"]},{"title":"FlaskBUG和技巧（小白","url":"https://www.gemingyu.top/2021/02/09/FlaskSkill1/","content":"问题和BUGFlask-SQLAlchemy选择日期等于今天的数据https://segmentfault.com/q/1010000014045246\nsqlalchemy几种查询方式总结http://www.cnblogs.com/shenckicc/p/6797990.html\nPython SQLAlchemy 不确定条件查询https://www.jianshu.com/p/a33f48387efa\nsqlachemy中批量删除的问题session.query(User).filter(User.id.in_((1, 2, 3))).delete(synchronize_session&#x3D;False)session.commit() # or session.expire_all()\nhttps://segmentfault.com/q/1010000000130368\nSQLAlchemy ORM 批量插入数据几种方法由于工作需要，需要批量插入大量数据，了解到以下几种批量插入方法\n第一种方法：\ns &#x3D; Session()objects &#x3D; [    User(name&#x3D;&quot;u1&quot;),    User(name&#x3D;&quot;u2&quot;),    User(name&#x3D;&quot;u3&quot;)]s.bulk_save_objects(objects)\n第二种方法：\nobjects &#x3D; [User(name&#x3D;&quot;u1&quot;), User(name&#x3D;&quot;u2&quot;), User(name&#x3D;&quot;u3&quot;)]session.add_all(objects)session.commit()\npy-sqlalchemy更新数据未报错但数据不更新：1.filter过滤id时不能用id==xxxArticle.query.filter(id == item_id)而是Article.query.filter(Article.id == item_id)\n2.update()之后要commit():\nfor i in params.get(&#39;item_id&#39;).split(&#39;,&#39;):Article.query.filter(Article.id &#x3D;&#x3D; i).update(&#123;Article.active_flag: active_flag&#125;)db.session.commit()\n只查看数据是否存在，不取出数据（提高性能）：existance &#x3D; db.session.query(exists().where(CollegeCategory.id &#x3D;&#x3D; params.get(&#39;category_id&#39;))).scalar()    if not existance:  # True or False:        return auth_handler(SYS_STATUS.FAILURE, None, &#39;文章分类不存在&#39;)\n第二种方法：\nif session.query(Item.id).filter(Item.email&#x3D;&#x3D;newItem.email,                                 Item.type&#x3D;&#x3D;newItem.type).count() &gt; 0:    &#x2F;&#x2F; item exists\n第三种方法：\ndb.session.query(exists().where(User.phone_prefix &#x3D;&#x3D; phone[0],User.phone&#x3D;&#x3D; phone[1])).scalar()\nFLask 分词搜索：keyword_list &#x3D; list(jieba.cut_for_search(params.get(&#39;input&#39;)))    keyword_filter &#x3D; [CollegeCategory.name.like(&#39;%&#123;&#125;%&#39;.format(kw)) for kw in keyword_list]    categorie_list &#x3D; CollegeCategory.query.filter(*keyword_filter).with_entities(        *college_category_basic).order_by(order_mode).paginate(page&#x3D;page_index,                                                               per_page&#x3D;page_size,                                                               error_out&#x3D;False)\n自定义sqlalchemy查询出来的字段名\n比如说，user.name原本返回‘name’现在改成‘姓名’：user.name.label(&quot;姓名&quot;)\nselect username, userid, &#39;user&#39; as new_column  from  users_table\nusers_table.c.userid.label(&#39;NewColumn&#39;)\nhttps://stackoverflow.com/questions/3576382/select-as-in-sqlalchemy\n","categories":[],"tags":["Flask"]},{"title":"windows10 开机无法识别的网络，必须重启网卡或者诊断才能获取ip","url":"https://www.gemingyu.top/2021/02/09/windowsUnrecognizedNetwork/","content":"点击开始菜单，在搜索栏中输入：“services.msc”（或者开始菜单搜索“服务”），并按下回车。如果此时弹出用户账户控制窗口，点击“继续”\n找到一下几个服务：\nDHCP Client\nDNS Client\nNetwork Connection\nNetwork Setup Service\nTCP/IP NetBIOS Helper\n逐个双击打开以上服务，把启动类型更改为自动，然后点击“服务状态”下面的“启用”按钮，然后确定保存\n重启电脑，问题解决\n","categories":[],"tags":["Windows，疑难杂症"]},{"title":"神力科莎Linux 开服务器","url":"https://www.gemingyu.top/2021/02/09/assettoLinuxServer/","content":"此方法来源于Steam一个大佬– 推荐系统：Ubuntu– 需要公网ip的服务器\n如果你的服务器是64位的系统需要安装32位的运行库（Steam 是32位的：32位系统可跳过\nsudo apt-get updatesudo apt-get install lib32gcc1 \n安装strackersudo apt-get install zlib1g:i386\n创建Steam用户,并获取该用户下的目录权限：sudo mkdir  /home/steam                  chown user: group /home/steam -R\n解压Steam Linux终端，并解压执行sudo chmod -R 755  /home/steam/cd /home/steamwget http://media.steampowered.com/client/steamcmd_linux.tar.gztar -xvf steamcmd_linux.tar.gz rm steamcmd_linux.tar.gz  ./steamcmd.sh +@sSteamCmdForcePlatformType windows\n之后会进入Steam终端&gt;,像这样：Steam&gt;\n输入Login  你的用户名并回车Steam&gt; login &lt;username&gt;;Steam&gt; passwdSteam&gt; enter security code sent to you registration email of your steam account \n然后再输入密码登录, 后面可能还让你输入邮件验证码、动态令牌之类的，根据提示来就行\n然后安装app：Steam&gt; force_install_dir ./assettoSteam&gt; app_update 302550  Steam&gt; exit\n然后配置一下你的开服信息，比如赛道，车，服务器名称什么的配置文件在*/home/steam/assetto/cfg/server_cfg.ini*用vim或者nano编辑都可以的\n配置车辆列表：/home/steam/assetto/cfg/entry_list.ini\n配置完成后开服：./acServer\n到此结束，此外你还要把端口9600的udp，tcp的端口打开，包括http的8081端口也要打开：\n比如可以这样打开：\nsudo ufw allow 9600sudo ufw allow 8081\n注意，阿里云的服务器，要到阿里云ECS的安全组里面配置打开\n","categories":[],"tags":["神力科莎"]},{"title":"神力科莎局域网联机，也可用zero-tier","url":"https://www.gemingyu.top/2021/02/05/AssettoCorsaLan/","content":"神力科莎局域网联机教程打开神力科莎安装目录，目录下有个server文件夹, 打开目录下的acServerManager.exe，随便配置一下，点击START SERVER,之后会打开个终端窗口，过了一会就会闪退，没关系\n下一步\n进入presets/SERVER_00文件夹(也可能是SERVER_01等等)，打开server_cfg.ini，找到REGISTER_TO_LOBBY=1这一行，改为REGISTER_TO_LOBBY=0，然后保存，关闭文件\n重新打开acServerManager.exe, START SERVER,OK\n让你局域网另一台计算机（客户端）打开神力科莎，选择上限，进入`联机阶段``, 等待刷新\n** 要确保两台计算机在同一网段，搜不到开服的计算机的话，设置服务器列表上面的过滤条件，有可能是被过滤掉了 **\n","categories":[],"tags":[]},{"title":"Hello World","url":"https://www.gemingyu.top/2021/02/05/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post1$ hexo new &quot;My New Post&quot;\nMore info: Writing\nRun server1$ hexo server\nMore info: Server\nGenerate static files1$ hexo generate\nMore info: Generating\nDeploy to remote sites1$ hexo deploy\nMore info: Deployment\n","categories":[],"tags":[]}]